################################################################################################
# This example demonstrates the simulation of a metal wrap-through solar cell design
# The simulation uses a mesh generated within GNU Octave using the pvmos-mesh extension,
# which allowy one to write rectilinear PVMOS meshes from within Octave. Here we create a metal
# wrap through design using images to define the geometry. For more details on the Octave script 
# take a look at "generate_mesh.m".
# In this file we will load the mesh and subsequently simplify it to reduce the number of 
# elements in the mesh. After simplifying the mesh we continue with the simulation of it.
################################################################################################
# To load the mesh generated within octave we use the loadmesh command
# It takes 2 arguments: 1: the binary mesh file 2: name of the mesh
loadmesh pinupmesh.bin pinup

################################################################################################
# The mesh created within Octave is a regular mesh. In general regular meshes have redundant 
# nodes in the sens that the same accuracy can often be obtained with a mesh with less nodes
# PVMOS has a simplification algorithm to reduce the number of nodes in a mesh.
################################################################################################
# The simplify command takes as an agrument the mesh that needs to be simplified
simplify pinup

################################################################################################
# To inspect the correctness of the mesh we print out some data
################################################################################################
printmesh pinup pinupmesh.dat
printarea pinup pinupdefs.dat
printpars pinup pinuppars.dat


################################################################################################
# The simplify command reduces the number of elements but does not consider the accuracy of the 
# simulation. In order to make an accurate simulation we do several rounds in which we adapt
# the mesh to simulated results.
################################################################################################
# splot all elements with edge lengths larger then 0.07 cm (in x and y direction)
split_coarse pinup 0.07 0.07
adaptive_solve 	pinup 	0.4 	0.3	2
printmesh pinup pinupmesh2.dat

################################################################################################
# Finally we solve something
################################################################################################
solve pinup 0 1.0 11 
surfVjplot pinup 0 0 10 10 200 200 0.5 pinupVj_05.dat
surfVplot pinup 0 0 10 10 200 200 0.5 pinupV_05.dat
surfPplot pinup 0 0 10 10 200 200 0.5 pinupP_05.dat
surfVjplot pinup 0 0 10 10 200 200 0.0 pinupVj_00.dat
surfVplot pinup 0 0 10 10 200 200 0.0 pinupV_00.dat
surfPplot pinup 0 0 10 10 200 200 0.0 pinupP_00.dat
printIV pinup pinupIV.dat
