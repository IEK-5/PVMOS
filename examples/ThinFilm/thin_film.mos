###################################################################################################
# In this example we create an 8x8 cm a-Si:H mini module with a defect.
###################################################################################################
# define geometry
define Nc	8
define wc	0.958
define wp1	8e-3
define wda	12e-3
define wp2	5e-3
define wp3	5e-3
define l	8

# diode properties
define J0 	2.4803e-12
define nid	1.5
define Jph 	0.015 	
define Rs	7.6529
define Rsh 	6.1273e+04
define Eg	1.7

# electrode resistances 
define Rf 	5
define Rb	0.1

# shunt
define Rshunt 0.00001
define rsh 	0.02
# half way into the third cell
define xsh 	[8e-3+2.5*(wc+wp1+2*wda+wp2+wp3)]
define ysh 	[l/2]

###################################################################################################
# create the meshes. The following meshes are created
# cell_a:	mesh for the active part of a cell stripe (i.e., not including dead area)
# p1:		mesh for the p1 laser line
# da:		mesh for the area's between laser lines
# p2:		mesh for the p2 laser line
# p3:		mesh for the p3 laser line
# cp:		mesh for a contact trip connected to the positive electrode
# cn:		mesh for a contact strip to the negative electrode
###################################################################################################
#		x1  y1		x2  	y2	Nx	Ny	name
newmesh 	0.0 0.0 	[wc]    8 	50 	21 	cell_a
newmesh 	0.0 0.0 	[wp1] 	8 	1 	21 	p1
newmesh 	0.0 0.0 	[wda] 	8 	1 	21 	da
newmesh 	0.0 0.0 	[wp2] 	8 	1 	21 	p2
newmesh 	0.0 0.0 	[wp3] 	8 	1 	21 	p3
newmesh 	0.0 0.0 	8e-3 	8 	1 	21 	cp
newmesh 	0.0 0.0 	8e-3 	8 	1 	21 	cn

###################################################################################################
# A mesh consists of nodes. The nodes in a mesh belong to areas. All meshed are initialized with 
# an area which is the same as the name of the mesh, and all nodes are assigned to it. You can 
# change the properties by using various commands starting with set_XX. You can also define new 
# areas and assign nodes to these new areas. More on that later. We first define the properties 
# per mesh. To refer to a certain area you must specify the mesh and the area name like so: 
# <mesh-name>.<area-name>
# Here we set the diode properties of the area cell_a in the mesh cell_a:
###################################################################################################
#		mesh.area	conn	J0	n	Jph	Rs	Rsh	Eg
set_1DJV 	cell_a.cell_a 	0	[J0] 	[nid] 	[Jph] 	[Rs] 	[Rsh]	[Eg]

###################################################################################################
# here we set the sheet resistances for the same area, for the positive and negative electrodes
###################################################################################################
#		mesh.area	electrode	Rel
set_Rel		cell_a.cell_a	0		[Rf]
set_Rel		cell_a.cell_a	1		[Rb]

###################################################################################################
# here follow various areas for the various meshes
# set_R sets the resistance between front and back electrode, here we remove the contact
###################################################################################################
set_R 		p1.p1 	 	0	1e90
set_Rel		p1.p1		0	1e9
set_Rel		p1.p1		1	[Rb]
set_SplitX	p1.p1

set_1DJV 	da.da 		0	[J0] 	[nid] 	[Jph] 	[Rs] 	[Rsh] 	[Eg]
set_Rel		da.da		0	[Rf]
set_Rel		da.da		1	[Rb]
set_SplitX	da.da

set_R 		p2.p2 	 	0	1e-2
set_Rel		p2.p2		0	[Rf]
set_Rel		p2.p2		1	[Rb]
set_SplitX	p2.p2

set_R 		p3.p3 	 	0	1e90
set_Rel		p3.p3		0	[Rf]
set_Rel		p3.p3		1	1e12
set_SplitX	p3.p3

set_R 		cp.cp 	 	0	1e90
set_Rel		cp.cp		0	[Rf]
set_Rel		cp.cp		1	[Rb]
set_Rvp 	cp.cp 		0	1e-8
set_SplitX	cp.cp

set_R 		cn.cn 	 	0	1e90
set_Rel		cn.cn		0	[Rf]
set_Rel		cn.cn		1	[Rb]
set_Rvn 	cn.cn 		0	1e-8
set_SplitX	cn.cn

###################################################################################################
# Now we start to assemble the complete mesh out of the various parts. When joining meshes we 
# will use the coordinate system of the first mesh. The coordinate system of the second mesh can 
# be shifted by using an x and y offset value. Note that you have to take care not to make the 
# meshes overlap I have not (yet) inplemented error checking for this! In order to keep track 
# of the dimensions and avoid overlapping meshes I keep track of the total width of the mesh on 
# the comment lines below the join commands.
###################################################################################################
#	 xoff y_off	mesh1		mesh2	mesh_out
joinmesh_h 	0.0 	cell_a		p1	cell_p1	
joinmesh_h 	0.0 	cell_p1		da	cell_p1da
joinmesh_h 	0.0 	cell_p1da	p2	cell_p1dap2
joinmesh_h 	0.0 	cell_p1dap2	da	cell_p1dap2da	
joinmesh_h	0.0 	cell_p1dap2da	p3	cell	
# should be 1 cm wide		

###################################################################################################
# Note that we now have many meshes defined:
# 1.  cell_a
# 2.  p1
# 3.  da
# 4.  p3
# 5.  cp
# 6.  cn
# 7.  cell_p1	
# 8.  cell_p1da	
# 9. cell_p1dap2
# 10. cell_p1dap2da	
# 11. cell
# The last mesh is cell stripe including dead area. We can easily series connect several cells 
# by joining several instances of the last mesh in a row. We can clean up things
###################################################################################################
# remove meshes we do not need
rm  cell_a
rm  p1
rm  da
rm  p3
rm  cell_p1	
rm  cell_p1da	
rm cell_p1dap2
rm cell_p1dap2da	

# make the series connection
# copy the cell mesh to the result mesn (res):
dupmesh cell res

define i 0
while [i] < [Nc-1]
# create a backup copy of the result mesh
	dupmesh res dummy
# remove the current result mesh
	rm res
# join the backup with the cell mesh and store in the result mesh
	joinmesh_h 	0.0 dummy cell res
# delete the backup copy
	rm dummy
	define i [i+1]
endwhile

###################################################################################################
# Now we add the contacts. Our final mesh will be called: minimodule
###################################################################################################
joinmesh_h  0.0 	cp		res	cpcells
joinmesh_h 0.0 		cpcells		cn	minimodule


###################################################################################################
# Now for some defects!
###################################################################################################
# First we create a new area with the defect properties
set_Rel		minimodule.shunt 	0 	[Rf]
set_Rel		minimodule.shunt 	1 	[Rb]
set_R		minimodule.shunt 	0 	[Rshunt]


###################################################################################################
# Create a finer mesh in several concentric circles around the defect
###################################################################################################
# nc is the number of concentric circles around the defect
define nc 2
# each ring a factor 'a' smaller then the previous one
define a 3
define i [nc]

while [i] > 0
# compute the radius of the circle
	define Rc [rsh*a^(i+1)]
# resolve the circles in the mesh (with an accurycy of 10%)
	resolve_circ minimodule [Rc/10] [xsh] [ysh] [Rc] 
# select elements within the circle
	select_circ [xsh] [ysh] [Rc] minimodule
# refine the selected elements (10 elements along the radius of the circle)
	split_coarse minimodule [Rc/10] [Rc/10]
	define i [i-1]
endwhile

# add the shunt in the center
resolve_circ minimodule [rsh/20] [xsh] [ysh] [rsh] 
select_circ [xsh] [ysh] [rsh] minimodule
assign_properties minimodule.shunt 
deselect minimodule

# Finished with the definition of the device
printmesh minimodule mesh0.dat
printarea minimodule defs.dat
printpars minimodule pars.dat

# adaptive_solve 	minimodule 	5 	0.3	3
# printmesh minimodule mesh1.dat

solve minimodule 0 8 21
refine_oc minimodule 1e-6 1e-6 5
refine_mpp minimodule 1e-6 1e-6 10

surfVplot minimodule 0 0 8 8 600 600 {minimodule.Vmpp} minimoduleVmpp.dat
surfVplot minimodule 0 0 8 8 600 600 {minimodule.Voc} minimoduleVoc.dat
surfVplot minimodule 0 0 8 8 600 600 5 minimodule5.dat
surfVplot minimodule 0 0 8 8 600 600 0 minimodule0.dat
printIV minimodule IV_minimodule.dat
print_solpar minimodule solpar_minimodule.dat
